/**************************************************************
Blynk is a platform with iOS and Android apps to control
ESP32, Arduino, Raspberry Pi and the likes over the Internet.
You can easily build mobile and web interfaces for any
projects by simply dragging and dropping widgets.

Downloads, docs, tutorials: https://www.blynk.io
Sketch generator: https://examples.blynk.cc
Blynk community: https://community.blynk.cc
Follow us: https://www.fb.com/blynkapp
            https://twitter.com/blynk_app

Blynk library is licensed under MIT license
**************************************************************/

/*************************************************************
Blynk.Edgent implements:
- Blynk.Inject - Dynamic WiFi credentials provisioning
- Blynk.Air - Over The Air firmware updates
- Device state indication using a physical LED
- Credentials reset using a physical Button
**************************************************************/

/* Fill in information from your Blynk Template here */
/* Read more: https://bit.ly/BlynkInject */
#define BLYNK_TEMPLATE_ID "TMPL6egdYquoa"
#define BLYNK_TEMPLATE_NAME "ES temp1"
#define BLYNK_FIRMWARE_VERSION "0.1.0"

#define BLYNK_PRINT Serial

//#define BLYNK_DEBUG
#define APP_DEBUG

// Uncomment your board, or configure a custom board in Settings.h
//#define USE_SPARKFUN_BLYNK_BOARD
//#define USE_NODE_MCU_BOARD
//#define USE_WITTY_CLOUD_BOARD
//#define USE_WEMOS_D1_MINI

#include "BlynkEdgent.h"

#define Sober 399.00 // Define max value that we consider sober
#define Drunk 400.00 // Define min value that we consider drunk
#define MQ3pin 0
#define BuzzerPin D3 // Define the buzzer pin
#define RedPin 5    // Define the red LED pin
#define GreenPin 4  // Define the green LED pin
#define BluePin 2   // Define the blue LED pin

char auth[] = "Wkwve058gD2ZHFtQuUzYCKVU7TLX9iFi"; // Auth Token from the Blynk App
char ssid[] = "PEPIM"; // Your WiFi SSID
char pass[] = "12347890"; // Your WiFi password

//background_color = "#F2ECE1" ;
//blynk.set_background_color(background_color);

void setup()
{
  Serial.begin(9600);
  Blynk.begin(auth, ssid, pass);
  Serial.println("MQ3 warming up!");
  delay(10000); // allow the MQ3 to warm up

  // Set LED pins as outputs
  pinMode(RedPin, OUTPUT);
  pinMode(GreenPin, OUTPUT);
  pinMode(BluePin, OUTPUT);
  pinMode(BuzzerPin, OUTPUT); // Set buzzer pin as output

  // Set initial LED state (flashing blue)
  flashLED(BluePin, 500); // Flash blue LED for 500ms
}

void loop()
{
  // Assuming alcohol sensor data is available as a float variable named alcoholLevel
  double alcoholLevel = getAlcoholLevel();

  // Send alcohol level data to Blynk app
  Blynk.virtualWrite(V0, alcoholLevel); // Assuming V1 is the virtual pin for alcohol level

  if (alcoholLevel < Sober) {
    Blynk.setProperty(V1, "color", "#44D62C"); // Green color
    Blynk.virtualWrite(V1, messageDisplay(alcoholLevel));
    setLEDState(GreenPin, HIGH); // Turn on green LED
    setLEDState(RedPin, LOW);    // Turn off red LED
  } else {
    Blynk.setProperty(V1, "color", "#D40000"); // Red color
    Blynk.virtualWrite(V1, messageDisplay(alcoholLevel));
    setLEDState(GreenPin, LOW);  // Turn off green LED
    setLEDState(RedPin, HIGH);   // Turn on red LED
  }

  Blynk.run();
  delay(6500); // Adjust delay as needed
}

double getAlcoholLevel() {
  double sensorValue;
  sensorValue = analogRead(MQ3pin); // read analog input pin 0

  Serial.print("Sensor Value: ");
  Serial.print(sensorValue);

  // Determine the status
  if (sensorValue < Sober) {
    Serial.println(" | Status: Sober");
  }/* else if (sensorValue >= Sober && sensorValue < Drunk) {
    Serial.println(" | Status: Drinking but within legal limits");
  }*/ else {
    Serial.println(" | Status: DRUNK");
    
  }

  beep(sensorValue); // Beep the buzzer
  delay(1000); // wait 2s for next reading

  return sensorValue;
}

String messageDisplay(double sensorValue) {
  String message;
  if (sensorValue < Sober) {
    message = "Safe To Drive";
    Serial.print("Safe to drive \n");
  } else {
    message = "Not Safe To Drive! ";
    Serial.print("Not Safe to drive !\n");
  }

  delay(2000); // wait 2s for next reading
  return message;
}

void beep(double sensorValue) {
  // Beep the buzzer
  while(sensorValue > Sober){
  digitalWrite(BuzzerPin, HIGH);
  delay(200); // Beep duration
  setLEDState(GreenPin, LOW);  // Turn off green LED
  setLEDState(RedPin, HIGH); // Turn buzzer on
  digitalWrite(BuzzerPin, LOW);
  delay(200); // Beep duration

  }// Turn buzzer off
}

void setLEDState(int pin, int state) {
  digitalWrite(pin, state);
}

void flashLED(int pin, int duration) {
  setLEDState(pin, HIGH);
  delay(duration);
  setLEDState(pin, LOW);
}